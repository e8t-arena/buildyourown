Writing a sqlite clone from scratch in C

https://cstack.github.io/db_tutorial/

# Ch 00 Overview

Database 工作原理

- 以什么形式存储数据？内存还是硬盘
- 何时将数据从内存移到硬盘
- 为什么每个表只有一个主键
- 事务如何回滚
- 索引是如何设计的
- 何时，以及如何进行全表扫描
- 预执行语句是以什么形式保存的

"What I cannot create, I do not understand." - Richard Feynman

# Ch 01 简介，实现 REPL

1. Sqlite

Sqlite 特点，整个数据库保存在单个文件中。

Sqlite 设计

  Tokenizer

  Parser

  Code Generator

  Virtual Machine

  B-Tree

  Pager

  OS Interface

前端，处理 query 输入 SQL query，输出 sqlite virtual machine bytecode
  （编译后的可在数据库执行代码）

  tokenizer
  parser
  code generator

后端

  virtual machine
    处理前端生成的 bytecode。
    然后在多个表和索引上执行操作，每个表或索引保存在 B-tree 数据结构中

  B-tree
    每个 B-tree 有很多节点，每个节点是 one page in length。
    B-tree 可以从硬盘获取 page 或写入硬盘

  pager
    接收命令，读写 pages of data。保留缓存最近访问的 pages 在内存。
    决定何时将缓存 pages 写回硬盘。

  os interface

2. 写个简单的 REPL

.exit 退出

# Ch 02 最简单 SQL 编译器和虚拟机

sqlite 的 front-end 是 SQL 编译器 

解析 string 并输出被称为 bytecode 的内部表示形式
bytecode 再被传递给 虚拟机执行

两步走好处
  - 减少每个部分的复杂度，虚拟机不需要关心语法错误
  - 能够缓存常用查询的 bytecode 提高性能

非 SQL 命令用 . 开始，叫做 meta-command 

SQL 命令支持两种 insert select 

do_meta_command 中就是对上一节命令处理部分的封装
C 中声明两个指针 char *p, *q;

# Ch 03 内存，单表，只能追加的数据库

一些限制

支持 insert 和打印全部行
只保存在内存里
只支持单个固定表名的表

支持列名和数据类型

id        integer
username  varchar(32)
email     varchar(255)

insert 语句: 

insert 1 Pony pony@craft.com

prepare_statement 需要能处理参数

使用 raw Data Structure 保存从命令中解析 sscanf 的数据

解析后的数据存储设计。sqlite 使用 b-tree 实现快速查询 插入 删除

这里设计简单点。b-tree 是先把数据分组形成 page 再构建成 tree，这里用 array

在 page 中保存 row
每个 page 保存尽可能多 row 
row 被序列化为简单形式
只分配内存给需要的 pages
保持固定大小指向page的指针数组


定义 row 的序列化形式

(id)(username)(email)

共 291 bytes
记录每个数据的 size  offset

size_of_attr
  https://stackoverflow.com/questions/3553296/sizeof-single-struct-member-in-c

序列化 和 反序列化

  看参数确定 memcpy 方向

memcpy(内存地址, 数据, 大小)

memcpy(dest, src, size)

https://en.cppreference.com/w/c/string/byte/memcpy

struct Table 

保存 pages 信息，追踪 pages 数量

page 大小 4k, 大部分系统以 4k 作为虚拟内存 page 大小。数据库 page 大小和内存 page 大小一样，操作系统能够整体读取读入数据
  http://www.cs.rpi.edu/academics/courses/fall04/os/c12/

采用 tree 结构的话，理论上 pages 数量仅受磁盘空间限制

写一个读取特定 row 的函数
  page 编号为数组下标 0-based

执行语句
  写入或读取 table


# Ch 04 测试
https://cstack.github.io/db_tutorial/parts/part4.html

# Ch 01 简介，实现 REPL
Refs:

getline
  https://man7.org/linux/man-pages/man3/getline.3.html getline(3) - Linux manual page
