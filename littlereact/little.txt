# Step zero

JSX 转 JS
  replace the code inside the tags with a call to createElement, 
  passing 
    the tag name, 
    the props
    the children as parameters.

title="foo"

<h1>Hello {title}</h1> 

const element = <h1 title="foo">Hello</h1>
const container = document.getElementById("root")
ReactDOM.render(element, container)

JSX 转为

const element = React.createElement(
  "h1",
  { title: "foo" },
  "Hello"
)

React.createElement 输出

const element = {
  type: "h1",
  props: {
    title: "foo",
    children: "Hello",
  },
}

ReactDOM.render()

const node = document.createElement(element.type)
node["title"] = element.props.title

const text = document.createTextNode("")
text["nodeValue"] = element.props.children

# step 1 创建 createElement

const element = (
  <div id="foo">
    <a>bar</a>
    <b />
  </div>
)
const container = document.getElementById("root")
ReactDOM.render(element, container)

[Note]: React doesn’t wrap primitive values or create empty arrays when there aren’t children

name our library: Liteact

让 babel 使用自定义的函数 

/** @jsx Liteact.createElement */ 对整个文件生效

# step 2 render 函数

adding stuff to the DOM

creating the DOM node using the element type

append the new node to the container

递归渲染 children

当 element.type 为 TEXT_ELEMENT 时，使用 document.createTextNode(value)

assign the element props to the node 

  element.props 其中过滤掉 children 部分

# step 3 Concurrent Mode

解决递归调用中的问题

  当 dom 树很深时，递归调用会阻塞主线程，无法响应用户输入，动画等高优先级指令

解决方案: 分单元执行递归，执行完固定单元后，让主线程优先处理其他指令

yield

window.requestIdleCallback 参数 deadline 可以用于查看在浏览器获得控制权前还有多长时间

performUnitOfWork 执行当前 unitOfWork 返回下一个 unitOfWork

# step 4 Fibers

使用 fiber tree 来组织 units of work

one fiber for each element 

each fiber will be a unit of work

例如 

Didact.render(
  <div>
    <h1>
      <p />
      <a />
    </h1>
    <h2 />
  </div>,
  container
)

render 中需要

  create the root fiber : div 
  设置 root fiber 为 nextUnitOfWork : 在 performUnitOfWork 中会 render div
  调用 performUnitOfWork
    add the element to the DOM
    为 children 创建 fiber
    选取下一个 unitOfWork

fiber tree 为了方便找到 next unit of work

在 fiber 中记录 first child, its next sibling, its parent
  child1 -> child2 -> its next sibling -> sibling.parent.sibling
  顺序:
    child
    sibling
    parent.sibling

# step 5 Render and Commit Phases

另一个问题，如果在未渲染完成是写入 DOM 用户会看到不完整的网页

移除直接修改 dom 树的操作，改为完成 fiber tree 后添加 dom 

追踪 root of fiber tree : work in progress root or wipRoot


# step 6 Reconciliation
# step 7

# step 8


# setup

https://www.snowpack.dev/tutorials/react

npx create-snowpack-app litereact --template @snowpack/app-template-minimal

mv index.js index.jsx

  export default {
    mount: {
-     /* ... */
+     // directory name: 'build directory'
+     public: '/',
+     src: '/dist',
    },
  };

npm install react react-dom --save
npm i react react-dom
npm start